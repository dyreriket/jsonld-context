* JSON-LD Contexts

Helpful JSON-LD contexts!

#+NAME: vocabularies
| link        | prefix | namespace                                   | source                                                                                 |
|-------------+--------+---------------------------------------------+----------------------------------------------------------------------------------------|
| [[./rdfs.json]] | rdfs   | http://www.w3.org/2000/01/rdf-schema#       |                                                                                        |
| [[./owl.json]]  | owl    | http://www.w3.org/2002/07/owl#              |                                                                                        |
| [[./skos.json]] | skos   | http://www.w3.org/2004/02/skos/core#        |                                                                                        |
| [[./sh.json]]   | sh     | http://www.w3.org/ns/shacl#                 |                                                                                        |
| [[./foaf.json]] | foaf   | http://xmlns.com/foaf/0.1/                  | http://xmlns.com/foaf/0.1/index.rdf                                                    |
| [[./pav.json]]  | pav    | http://purl.org/pav/                        | http://pav-ontology.github.io/pav/pav.rdf                                              |
| [[./dc.json]]   | dc     | http://purl.org/dc/elements/1.1/            | https://www.dublincore.org/specifications/dublin-core/dcmi-terms/dublin_core_terms.ttl |
| [[./vann.json]] | vann   | http://purl.org/vocab/vann/                 | https://vocab.org/vann/vann-vocab-20100607.rdf                                         |
#+TBLFM: $1='(concat "[[./" $2 ".json]]")


** Script

Insprired by https://gist.github.com/niklasl/2770154

#+BEGIN_SRC python :var table=vocabularies :exports both :results value html
import sys
import rdflib
import json
from rdflib import Graph, Namespace, URIRef
from rdflib.namespace import NamespaceManager, XSD, RDF, RDFS, OWL

output = ""

for row in table:

  prefix = str(row[1]).strip()
  url = str(row[2]).strip()
  source = str(row[3]).strip()
  if(source == ''):
    source = url

  g = Graph().parse(source)
  nm = NamespaceManager(g)
  
  # TODO read imports too?
  
  stdObjectRanges = { RDF.Property, RDFS.Class, RDFS.Datatype, OWL.Class, OWL.Thing, OWL.Ontology }
  stdDataRanges = { RDFS.Literal }
  noRanges = { RDFS.Resource }
  
  # collect classes and properties
  classes = set(g.subjects(RDF.type, OWL.Class)) | set(g.subjects(RDF.type, RDFS.Class))
  objectProperties = set(g.subjects(RDF.type, OWL.ObjectProperty))
  dataProperties = set(g.subjects(RDF.type, OWL.DatatypeProperty))
  otherProperties = set(g.subjects(RDF.type, RDF.Property)) | set(g.subjects(RDF.type, OWL.AnnotationProperty))
  
  # decide if other Properties are object or data properties:
  for p in set(g.subjects(RDF.type, RDF.Property)) - (objectProperties | dataProperties):
      if (set(g.objects(p, RDFS.range)) & (classes | stdObjectRanges)) - (stdDataRanges | noRanges):
          objectProperties.add(p)
      elif filter(lambda p : p.startswith(XSD), set(g.objects(p, RDFS.range))) or set(g.objects(p, RDFS.range)) & stdDataRanges:
          dataProperties.add(p)
  
  ####
  
  context = list()
  context.append('"@version": 1.1')
  
  # Prefixes
  prefixes = list(map(lambda p : '"' + p[0] + '": "' + str(p[1]) + '"', sorted(NamespaceManager(g).namespaces())))
  context.extend(prefixes)
  
  # Imports?
  
  # Properties
  properties = list()
  for p in sorted(objectProperties | dataProperties | otherProperties):
      attributes = list()
  
      if p in objectProperties:
          attributes.append('"@type": "@id"')
  
      if p in dataProperties:
          ranges = set(g.objects(p, RDFS.range)) - { RDFS.Literal }
          xsdranges = set(filter(lambda p : p.startswith(XSD), ranges))
          if len(ranges) == len(xsdranges) == 1:
              attributes.append('"@type": "%s"' % (nm.qname(xsdranges.pop())))
  
      if (p, RDFS.range, RDF.List) in g:
          attributes.append('"@container": "@list"')
  
      properties.append('"' + nm.qname(p) + '": {' + ', '.join(attributes) + '}')
  context.extend(properties)
  
  
  # print
  jsonString = '{ "@context": {' + ','.join(context) + ' } }' # end context and file
  print(json.dumps(json.loads(jsonString), indent=2))

  filename = prefix + ".json"
  f = open(filename, "w")
  f.write(json.dumps(json.loads(jsonString), indent=2))
  f.close()
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
None
#+END_EXPORT


* _org-mode                                                        :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: JSON-LD Contexts
#+AUTHOR: Martin G. SkjÃ¦veland
#+EMAIL: m.g.skjaeveland@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE: Useful JSON-LD contexts!
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:
#+EXPORT_FILE_NAME: index.html

